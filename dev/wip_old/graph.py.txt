# -----------------------------------


css = """
table
{
  background-color: #dddddd;
}
th, td
{
  padding: 0px 10px 0px 10px;
  backgroud-color: rgba(54, 25, 25, 0.5);
}
"""


def prepare_graph_and_labels(decomposition_tree, counter=None):
    counter = counter or itertools.count()
    node_id = str(counter.next())
    G = nx.DiGraph()
    G.add_node(node_id)
    labels_dict = {}
    stats = pd.DataFrame()
    stats.at["stats", "n_rows"] = str(
        len(decomposition_tree["starting_df"])
    )  # at least one string value
    stats.at["stats", "n_cols"] = len(decomposition_tree["starting_df"].columns)
    stats.at["stats", "cols"] = str(decomposition_tree["starting_df"].columns.tolist())
    stats.at["stats", "height"] = 0
    stats.at["stats", "nodes"] = 1
    stats.at["stats", "leafs"] = 0
    stats.at["stats", "n_cols_in_leafs"] = 0
    additional = {
        "id": node_id,
        "rows": decomposition_tree["starting_df"].index.tolist(),
    }
    if len(decomposition_tree["decomposition"]) > 1:
        covered_rows = []
        for child_tree in decomposition_tree["decomposition"]:
            (
                child_graph,
                child_labels_dict,
                child_stats,
                child_additional,
            ) = prepare_graph_and_labels(child_tree, counter)
            G.add_nodes_from(child_graph.nodes())
            G.add_edges_from(child_graph.edges())
            G.add_edge(node_id, child_additional["id"])
            labels_dict.update(child_labels_dict)
            stats.at["stats", "height"] = max(
                stats.at["stats", "height"], child_stats.at["stats", "height"] + 1
            )
            stats.at["stats", "nodes"] += child_stats.at["stats", "nodes"]
            stats.at["stats", "leafs"] += child_stats.at["stats", "leafs"]
            stats.at["stats", "n_cols_in_leafs"] += child_stats.at[
                "stats", "n_cols_in_leafs"
            ]
            covered_rows.extend(child_additional["rows"])
        s = pd.Series(covered_rows).value_counts().value_counts()
        stats.at["stats", "n_rows_covered_2_times"] = s[2] if 2 in s else 0
        stats.at["stats", "n_rows_covered_3_times"] = s[3] if 3 in s else 0
    else:
        stats.at["stats", "height"] = 1
        stats.at["stats", "leafs"] = 1
        stats.at["stats", "n_cols_in_leafs"] = len(
            decomposition_tree["starting_df"].columns
        )
    labels_dict[node_id] = stats.T.to_html()
    return G, labels_dict, stats, additional


def draw_decomposition_tree(decomposition_tree, figsize=(10, 12)):
    fig = plt.figure(figsize=figsize)
    G, labels, _, _ = prepare_graph_and_labels(decomposition_tree)
    pos = nx.nx_pydot.pydot_layout(G, "dot")
    nodes = nx.draw_networkx_nodes(G, pos, node_color="green")
    nx.draw_networkx_edges(G, pos, arrows=False)
    tooltip = mpld3.plugins.PointHTMLTooltip(
        nodes, labels.values(), voffset=0, hoffset=30, css=css
    )
    mpld3.plugins.connect(fig, tooltip)


# with open('sample_tree_for_zoo_low_avg.save', 'r') as f:
#     draw_decomposition_tree(pickle.load(f))


# -----------------------------------

css = """
table
{
  background-color: #dddddd;
}
th, td
{
  padding: 0px 10px 0px 10px;
  backgroud-color: rgba(54, 25, 25, 0.5);
}
"""


def prepare(decomposition_tree, counter=None):
    counter = counter or itertools.count()
    node_id = str(counter.next())
    G = nx.DiGraph()
    G.add_node(node_id)
    labels_dict = {}
    if len(decomposition_tree["decomposition"]) > 1:
        covered_rows = []
        for child_tree in decomposition_tree["decomposition"]:
            child_graph, child_labels_dict, child_id = prepare(child_tree, counter)
            G.add_nodes_from(child_graph.nodes())
            G.add_edges_from(child_graph.edges())
            G.add_edge(node_id, child_id)
            labels_dict.update(child_labels_dict)
    labels_dict[node_id] = decomposition_tree["starting_df"].head().to_html()
    return G, labels_dict, node_id


def draw(decomposition_tree, figsize=(12, 12)):
    fig = plt.figure(figsize=figsize)
    G, labels, _ = prepare(decomposition_tree)
    pos = nx.nx_pydot.pydot_layout(G, "dot")
    nodes = nx.draw_networkx_nodes(G, pos, node_color="gray")
    nx.draw_networkx_edges(G, pos, arrows=False)
    tooltip = mpld3.plugins.PointHTMLTooltip(
        nodes, labels.values(), voffset=0, hoffset=30, css=css
    )
    mpld3.plugins.connect(fig, tooltip)


# draw(xx)


# -----------------------------------
