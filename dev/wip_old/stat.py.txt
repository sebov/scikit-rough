def get_length_for_bireduct(bireduct):
    return len(bireduct[1])


def get_length_for_tree(tree):
    if len(tree["decomposition"]) == 1:
        return 1, 1, len(tree["decomposition"][0]["columns"]), 1
    else:
        zip_child_stats = zip(
            *itertools.imap(get_length_for_tree, tree["decomposition"])
        )
        return (
            (sum(zip_child_stats[0]) + 1),
            sum(zip_child_stats[1]),
            sum(zip_child_stats[2]),
            (max(zip_child_stats[3]) + 1),
        )


def get_lengths_for_models(models, get_length_f):
    return pd.concat(
        [
            pd.concat(
                [
                    pd.DataFrame([get_length_f(element) for element in fold[2]])
                    for fold in kfolds
                ],
                ignore_index=True,
            )
            for kfolds in models
        ],
        ignore_index=True,
    )


# bireduct_lengths = get_lengths_for_models(bireducts['bireduct_models'], get_length_for_bireduct)
# tree_lengths = get_lengths_for_models(trees['tree_models'], get_length_for_tree)
# get_decomposition_tree_stats(trees['tree_models'][8][0][2][23])
# bireduct_lengths = get_lengths_for_models(bireducts['bireduct_models'], get_length_for_bireduct)
# tree_lengths = get_lengths_for_models(trees['tree_models'], get_length_for_tree)
# print 'średnia wielkość bireduktów', bireduct_lengths[0].mean()
# print 'średnia wielkość liści', (tree_lengths[2]/tree_lengths[1]).mean()
# print 'średnia liczba węzłów', tree_lengths[0].mean()
# print 'średnia liczba liści', tree_lengths[1].mean()
# print 'średnia wysokość', tree_lengths[3].mean()

# -----------------------------------------------
